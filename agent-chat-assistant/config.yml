---
title: Agent Chat Assistant
description: Step by step procedure on how to create an agent assistant for chat interactions.
categories:
- Chat
steps:
- title: Introduction
  content: |
    This tutorial walks through the steps to create an agent assistant for chat interactions. An agent assistant will display suggested responses based on predefined keywords and responses.
- title: Configure SDK Settings
  content: |
    First is the configuration of SDK setting by providing an access token which will be used in processing API calls.

    To obtain a token, separate function is created to request token from Genesys Cloud.
- title: Obtain an Access Token
  content: |
    Start by making a POST call to https://login.mypurecloud.com/oauth/token to request a token. Some SDKs will include helper functions to obtain the token using the Client ID and Client Secret, while on other SDKs, the HTTP Request and Response needs to be manually handled to obtain the token.
    
    For this tutorial, Implicit Grant Type will be used as user context is needed in acquiring the desired information.
    
    More information about OAuth and Authorization could be found in the [documentation](https://developer.mypurecloud.com/api/rest/authorization/)
- title: Instantiate APIs
  content: |
    Instance of User API, Conversation API and Notification API will be created and will be passed to different methods.
- title: Get User Details
  content: |
    Before getting the conversations, we need to get the logged in user's details. We will then call the getUsersMe function of the Users API to get the userId.
    
    Once we get the user details, we will call the setupChatChannel function.
- title: Setup Chat Channel
  content: |
    The setupChatChannel function will be called to subscribe to incoming chat conversations. This function triggers the onChatConversationEvent function.
- title: Create a Channel in the setupChatChannel function
  content: |
    In the setupChatChannel function, we will first create a channel. The postNotificationsChannels function of Notifications API will be called. We will also create a web socket to handle the on socket messages.
- title: Subscribe to Incoming Chat Conversations in the setupChatChannel function
  content: |
    Once a channel has been created, we can now subscribe to incoming chat conversations. The addSubscription function will be called to call the postNotificationsChannelSubscriptions function of the Notifications API with the topic `v2.users.${userId}.conversations.chats`.
- title: onChatConversationEvent function
  content: |
    This function is triggered by the setupChatChannel function when a conversation event fires. This function handles multiple events such as when an agent is connected, when an agent has multiple chat interactions and when a chat has ended.
- title: When Agent is Connected Event
  content: |
    When an agent is connected and the isExisting flag returns false, the registerConversation function will be called to call the getConversation function of the Conversations API. Once we get the conversation details, we will display the conversation to the view then call the addSubscription function to add a subscription to the channel with the topic `v2.conversations.chats.${conversationId}.messages`.
- title: When Agent has Multiple Interactions
  content: |
    When an agent has multiple chat interactions, we can determine which customer the agent is currently working on. If the agent participant's held status is false, it means that the agent has the chat opened to this customer.
- title: setActiveChat function
  content: |
    This function calls getConversationsChatMessages of the Conversations API to display the messages in the view.
    
    Then calls the makeTabActive to set the focus to the active interaction of the agent and the displayTranscript to display the messages in the view.
    
    Finally, it will call the showRecommendations function that triggers the service to get the recommended responses to show in the view.
- title: showRecommendations function
  content: |
    This function calls a service to get the recommended response and shows it to the view. When the agent selects a recommended response, it will trigger the sendMessage function to send the selected text to the customer.
- title: When Chat has Ended
  content: |
    When a chat has ended, we can know by the state of the agent participant. If this event triggers, the tab of the customer will be removed from the view.
- title: processExistingChats function
  content: |
    This handles the logic when an agent has existing chat interaction/s when the app loads.
    
    This calls the getConversationsChats function of the Conversations API to get the conversation details. Then adds a subscription to the topic `v2.conversations.chats.${conversationId}.messages`. And finally calls the populateActiveChatList to display the current customer interactions as tabs.
- title: index.html file
  content: /
    This is the HTML file used in this tutorial
- title: style.css file
  content: /
    All CSS styles used in the HTML file
- title: view.js file
  content: |
    All HTML related codes are placed in this JavaScript module.
- title: agent-assistant-service.js file
  content: |
    This JavaScript module simulates an agent assistant. It listens for keywords from the customer and suggets possible responses for the agent.
languages:
  javascript:
    displayName: JavaScript
    steps:
    - file: "javascript/scripts/main.js"
      highlight: "0-324"
    - file: "javascript/scripts/main.js"
      highlight: "300-302"
    - file: "javascript/scripts/main.js"
      highlight: "300-302"
    - file: "javascript/scripts/main.js"
      highlight: "9-12"
    - file: "javascript/scripts/main.js"
      highlight: "306-312"
    - file: "javascript/scripts/main.js"
      highlight: "215-222"
    - file: "javascript/scripts/main.js"
      highlight: "196-210"
    - file: "javascript/scripts/main.js"
      highlight: "219-220"
    - file: "javascript/scripts/main.js"
      highlight: "229-278"
    - file: "javascript/scripts/main.js"
      highlight: "247-262"
    - file: "javascript/scripts/main.js"
      highlight: "266-268"
    - file: "javascript/scripts/main.js"
      highlight: "75-112"
    - file: "javascript/scripts/main.js"
      highlight: "118-128"
    - file: "javascript/scripts/main.js"
      highlight: "271-277"
    - file: "javascript/scripts/main.js"
      highlight: "161-185"
    - file: "javascript/index.html"
      highlight: "1-43"
    - file: "javascript/styles/style.css"
      highlight: "1-103"
    - file: "javascript/scripts/view.js"
      highlight: "0"
    - file: "javascript/scripts/agent-assistant-service.js"
      highlight: "0"