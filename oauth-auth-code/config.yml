---
title: OAuth Authorization Code Grant Flow
description: Authorization code grant login without a client library.
categories:
- OAuth
steps:
- title: Introduction
  content: |
    This tutorial walks through the steps of setting up a server that will authenticate to Genesys Cloud using the [Authorization Code Grant](http://developer.mypurecloud.com/api/rest/authorization/use-authorization-code.html).

    The authorization code grant is useful in applications that have a secure server side component where the client secret can remain a secret and have a mapping to a web user session so that the Genesys Cloud authorization token isn't sent to the web browser.

    The method of keeping track of the user via cookies is just one of many ways to track your web users, it may or may not be the best option for your scenario.

- title: Start a Web Server
  content: |
    We will start a web server which will use cookies to keep track of the web users and inspect the requests coming in to determine if there is a session token and if the user needs to be redirected to the Genesys Cloud login screen.

- title: Check for Valid Genesys Cloud Session on Requests
  content: |
    When a request comes in, we can check our session map for a Genesys Cloud token for that given web browser session. If a session is not found, then we will create a redirect URI that contains our client id and redirect uri and issue a 301 for the browser to redirect to the Genesys Cloud login screen.

- title: Request Access Token
  content: |
    After the user has logged into Genesys Cloud, their browser is redirected to the URL of the web server. In the handler for the request we now have to make a post to Genesys Cloud with a token that is part of the query string on the request to our web server. This request to Genesys Cloud validates that the web server behind the redirect url is the correct web server for this client id.

    The response from this post contains the Genesys Cloud access token for that user which our web server needs to keep track of so will store it in the local session map.

    Finally, we redirect to a more useful (my_info.html) page.

- title: Making an AJAX Request from the Web Page
  content: |
    The web page can now make requests to the server, here we will call GET /me to get the current users information. Since the web server is using cookies, the cookie will be sent with this web request automatically.

- title: Make a Request Server Side for the Authenticated User
  content: |
    Finally, back in the server we will pull the Genesys Cloud authentication token out of our mapping and make a request to Genesys Cloud on behalf of this user.

    An alternative to this approach would be when the my_info.html page was requested, the web server could have made the request and automatically put the users information in the page that was sent back.

languages:
  ruby:
    displayName: Ruby
    steps:
    - file: "ruby/server.rb"
      highlight: "0-100"
    - file: "ruby/server.rb"
      highlight: "1-13"
    - file: "ruby/server.rb"
      highlight: "24-45"
    - file: "ruby/server.rb"
      highlight: "53-70"
    - file: "ruby/my_info.html"
      highlight: "8-16"
    - file: "ruby/server.rb"
      highlight: "72-77"
  nodejs:
    displayName: NodeJS
    steps:
    - file: "nodejs/server.js"
      highlight: "0-150"
    - file: "nodejs/server.js"
      highlight: "108-109"
    - file: "nodejs/server.js"
      highlight: "13-33"
    - file: "nodejs/server.js"
      highlight: "46-86"
    - file: "nodejs/my_info.html"
      highlight: "8-16"
    - file: "nodejs/server.js"
      highlight: "89-106"
  csharp:
    displayName: ASP.NET
    steps:
    - file: "csharp/authorization_code_aspdotnet/Controllers/HomeController.cs"
      highlight: "0-95"
    - file: "csharp/authorization_code_aspdotnet/Controllers/HomeController.cs"
      highlight: "16-16"
    - file: "csharp/authorization_code_aspdotnet/Controllers/HomeController.cs"
      highlight: "44-49"
    - file: "csharp/authorization_code_aspdotnet/Controllers/HomeController.cs"
      highlight: "59-73"
      note: The ASP.NET example does not redirect the user after this step. Instead, the user remains on the main page.
    - file: "csharp/authorization_code_aspdotnet/Controllers/HomeController.cs"
      highlight: "75-81"
      note: The ASP.NET example is not using cookies and instead sets the Authorization header with the bearer token. This request is made server-side, but could be made client-side using JavaScript.
    - file: "csharp/authorization_code_aspdotnet/Controllers/HomeController.cs"
      highlight: "75-81"
  python:
    displayName: Python
    steps:
    - file: "python/server.py"
      highlight: "0-166"
    - file: "python/server.py"
      highlight: "98-133"
    - file: "python/server.py"
      highlight: "124-133"
    - file: "python/server.py"
      highlight: "28-94"
      note: The python example does not use cookies to track sessions and instead generates a random GUID to identify the session between the browser and the python server. This GUID is passed back and forth in the sessionKey query string parameter.
    - file: "python/my_info.html"
      highlight: "19-29"
      note: The python example does not use cookies and instead makes use of the sessionKey GUID created in the previous step.
    - file: "python/server.py"
      highlight: "12-26"
