---
title: OAuth Implicit Grant Login Flow
description: Implicit grant login without a client library.
categories:
- OAuth
steps:
- title: Introduction
  content: |
    This tutorial walks through how to use the OAuth implicit code grant.  For more information on the implicit grant, see [Use an Implicit Grant](http://developer.mypurecloud.com/api/rest/authorization/use-implicit-grant.html)

- title: Redirect to Genesys Cloud to Handle Authentication
  content: |
    When the page loads, we redirect the page to the authorization url and specify:

    **response_type**: Use _token_ since this is an implicit (token) grant.
    **client_id**: The client ID for this application.
    **redirect_uri**: The URI to which the user is redirected after login.

- title: Get the Access Token Out of the Url
  content: |
    After the user follows the redirect, the URI contains a hash (#) with the access token as a parameter.  We strip the parameter and save it in the token variable.

- title: Make API Calls
  content: |
    Now that we have the bearer token, we can make an Ajax call to Genesys Cloud, setting the value of the **Authorization** parameter to **bearer** _token_, where _token_ is the value from the hash.

languages: 
  javascript:
    displayName: Javascript
    steps:
    - file: "javascript/example.html"
      highlight: "0-100"
    - file: "javascript/example.html"
      highlight: "29-35"
    - file: "javascript/example.html"
      highlight: "6-15"
    - file: "javascript/example.html"
      highlight: "17-24"
  csharp:
    displayName: C#
    steps:
    - file: "csharp/MainForm.cs"
      highlight: "0-100"
      note: In a C# desktop application, we host the login window in a web browser control and watch for the navigation event.  When this occurs, we pull the access_token from the URL.
    - file: "csharp/MainForm.cs"
      highlight: "20-28"
    - file: "csharp/MainForm.cs"
      highlight: "55-66"
    - file: "csharp/MainForm.cs"
      highlight: "36-52"
  ruby:
    displayName: Ruby
    steps:
    - file: "ruby/script.rb"
      highlight: "0-100"
      note: In Ruby, we start a Sinatra server and open a web browser that displays the authorization page to the end user.
    - file: "ruby/script.rb"
      highlight: "28-41"
    - file: "ruby/script.rb"
      highlight: "16-27"
      note: We post the token to the server for use in the server.
    - file: "ruby/script.rb"
      highlight: "8-14"
  python:
    displayName: Python
    steps:
    - file: "python/server.py"
      highlight: "0-62"
      note: In Python, we start a server via listening on a socket and open a web browser that displays the authorization page to the end user.
    - file: "python/implicit.html"
      highlight: "29-35"
    - file: "python/server.py"
      highlight: "51-55"
      note: We post the token to the server for use in the server.
    - file: "python/server.py"
      highlight: "3-21"
