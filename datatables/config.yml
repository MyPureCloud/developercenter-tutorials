---
title: Creating a Data Table with CSV
description: Overview of creating a Data Table from a CSV file
categories:
- Architect
steps:
- title: Introduction
  content: |
    Data tables allow organizations to store data locally.
    
    One of the most common use cases is integration with third party services. An example is a service that determines the account type based on the caller's input and then route the caller to a corresponding queue. Instead of the switching logic being in the callflow, the account type-queue relationship could be defined in a data table. This allows for easier management especially if there are multiple values.

    Another thing to keep in mind is when NOT to use data tables. It is not recommended to be used when frequent read-write operations are required - as tempting as that may be. There are use cases where the data table needs to be updated dynamically but only in relatively light loads. Data tables is not a replacement for dedicated databases. 

    This tutorial demonstrates how to create a data table and import information from a CSV.

    The values can be any of the following common data types: string, boolean, integer, and float (identified as "number" by the API). The key identifier will always be a string.

    For more information on data tables see the [Resource Center](https://help.mypurecloud.com/articles/work-with-data-tables/)

- title: Authenticate with Genesys Cloud
  content: |
    The OAuth Client Credentials are retrieved from environment variables and used to authenticate with Genesys Cloud.

    For more information on authorization see this [page](/api/rest/authorization/)

- title: Define the data table schema
  content: |
    This object is equivalent to the JSON that will be passed on to the actual request. 
    
    The CSV must contain a 'key' column which is the unique key id for the table and it should be of type 'string'. Its display name could be changed however through its 'title' property.  For the other columns, the type should be defined and a default value could be optionally provided.

- title: Create Data Table
  content: |
    Using the specified schema, an empty data table could now be created. 

- title: Import data from the CSV
  content: |
    In this step, the CSV contents will be parsed and type-converted through a helper function. The values should match the data type for that property as defined in the schema.

    The rows will be iterated over and added to the data table.

languages:
  nodejs:
    displayName: NodeJS
    steps:
    - file: "nodejs/index.js"
      highlight: "1-160"
    - file: "nodejs/index.js"
      highlight: "136-147"
    - file: "nodejs/index.js"
      highlight: "11-49"
    - file: "nodejs/index.js"
      highlight: "51-63"
    - file: "nodejs/index.js"
      highlight: "82-107"
  python:
    displayName: Python
    steps:
    - file: "python/datatables.py"
      highlight: "1-105"
    - file: "python/datatables.py"
      highlight: "10-21"
    - file: "python/datatables.py"
      highlight: "26-64"
    - file: "python/datatables.py"
      highlight: "66-72"
    - file: "python/datatables.py"
      highlight: "74-105"
  java:
    displayName: Java
    steps:
    - file: "java/main/java/Main.java"
      highlight: "1-149"
    - file: "java/main/java/Main.java"
      highlight: "66-88"
    - file: "java/main/java/Main.java"
      highlight: "19-56"
    - file: "java/main/java/Main.java"
      highlight: "93-101"
    - file: "java/main/java/Main.java"
      highlight: "103-147"
